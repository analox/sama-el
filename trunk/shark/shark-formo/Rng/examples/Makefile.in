# Rng examples makefile

############### determine the host type
#
HHOST			= @HOST@
ARCH_MACH		= @ARCH_MACH@

############### variables set by configure script
#
LDLIBS 			= @LIBS@
CPPFLAGS 		= @CPPFLAGS@
X_CFLAGS 		= @X_CFLAGS@
ifeq ($(HOST),SunOS)
	X_CFLAGS   := $(X_CFLAGS:-I%=-isystem %)
endif
X_LIBS 			= @X_LIBS@
X_EXTRA_LIBS		= @X_EXTRA_LIBS@
X_PRE_LIBS 		= @X_PRE_LIBS@
DEFS 			= @DEFS@
LDFLAGS 		= @LDFLAGS@
CC			= @CC@
CPP 			= @CPP@
CXX 			= @CXX@
MAKE			= @MAKE@
FIND			= @FIND@
PERL			= @PERL@
LIBEXT			= @LIBEXT@
CFLAGS_ND		= @CFLAGS_ND@
CFLAGS_D		= @CFLAGS_D@
CFLAGS			= @CFLAGS@
LD_SHARED		= @LD_SHARED@

############### directories
#
sharkdir		= $(shell cd ../..; pwd)
top_includedir		= $(sharkdir)/include
basedir			= ..
libdir			= $(basedir)/lib


############### additional include directories
#
#X_CFLAGS	+=	-I$(top_includedir)	
X_LIBS_ND	 =	-L$(libdir)

X_LIBS_D	= $(X_LIBS_ND:%/lib=%/lib/debug)
X_LIBS_D       := $(X_LIBS) $(X_LIBS_D)
X_LIBS_ND      := $(X_LIBS) $(X_LIBS_ND)

############### additional settings
#
LDLIBS         := -lRng_$(ARCH_MACH)

############## os specific settings
#

CFLAGS		   += $(X_CFLAGS) -I$(top_includedir) $(DEFS)

############### example progs
#
PROGS			= 	RngTest_$(ARCH_MACH) \
				RngTest2_$(ARCH_MACH) \
				RngTestSimple_$(ARCH_MACH)

PROGS_DEBUG		= $(PROGS:%=%_debug)

###############	implicit rules
#
%.o: %.cpp
	$(CXX) $(CFLAGS) $(CFLAGS_ND) -o $@ -c $<

%.debug.o: %.cpp
	$(CXX) $(CFLAGS) $(CFLAGS_D) -o $@ -c $<

all: $(PROGS)

debug: $(PROGS_DEBUG)

############### suffixes list
#
.SUFFIXES:
.SUFFIXES:	.o ${LIBEXT} .a .c .h

############### make program
#
%_$(ARCH_MACH): %.o
	$(CXX) $(X_LIBS_ND) -o $@ $< $(LDLIBS)

%_$(ARCH_MACH)_debug: %.debug.o
	$(CXX) $(X_LIBS_D) -o $@ $< $(LDLIBS)

clean:
	-rm -f *.o *~ raw red white pca

distclean: clean
	-rm -f $(PROGS) $(PROGS_DEBUG)

unix2dos:
	@printf "### Transforming all Visual C++ project and workspace files to Windows format... "
	@for i in `$(FIND) $(BASE_DIR) -type f \(\
	-name "*.dsp" -o            \
	-name "*.dsw"               \) -print`; \
	do $(PERL) -pi -e 's/\n/\r\n/;' $$i; done
	@echo "Done."









