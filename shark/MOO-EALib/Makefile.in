############### determine the host type
#
HOST			= @HOST@
ARCH_MACH		= @ARCH_MACH@

SHELL 			= /bin/sh

############### name of package
#
PACKAGE			= MOO-EALib
PACKAGE_MD		= $(PACKAGE)_$(ARCH_MACH)
VERSION         	= @VERSION@

############### variables set by configure script
#
LDLIBS 			= @LIBS@
CPPFLAGS 		= @CPPFLAGS@
X_CFLAGS 		= @X_CFLAGS@
X_LIBS 			= @X_LIBS@
X_EXTRA_LIBS		= @X_EXTRA_LIBS@
X_PRE_LIBS 		= @X_PRE_LIBS@
FLAG_SPREADCAT		= @FLAG_SPREADCAT@
LIBS_PVM		= @LIBS_PVM@
PVM_LDLIBS		= @PVM_LDLIBS@
DEFS 			= @DEFS@
LDFLAGS 		= @LDFLAGS@
CC			= @CC@
CPP 			= @CPP@
CXX 			= @CXX@
FIND			= @FIND@
MAKE			= @MAKE@
PERL			= @PERL@
LIBEXT			= @LIBEXT@
CFLAGS_ND		= @CFLAGS_ND@
CFLAGS_D		= @CFLAGS_D@
CFLAGS			= @CFLAGS@
LD_SHARED		= @LD_SHARED@


LDLIBS          += -lRng_${ARCH_MACH} -lArray_${ARCH_MACH}  -lLinAlg_${ARCH_MACH} -lEALib_${ARCH_MACH}
LDFLAGS         += -L$(sharkdir)/Rng/lib -L$(sharkdir)/LinAlg/lib -L$(sharkdir)/Array/lib -L$(sharkdir)/EALib/lib
LDFLAGS_DEBUG   += -L$(sharkdir)/Rng/lib/debug -L$(sharkdir)/LinAlg/lib/debug -L$(sharkdir)/Array/lib/debug -L$(sharkdir)/EALib/lib/debug


############### directories
#
sharkdir			= $(shell cd ..; pwd)
shark_includedir	= $(sharkdir)/include

basedir				= .
srcdir				= $(basedir)/src
mandir				= $(basedir)/man
libdir				= $(basedir)/lib
includedir			= $(basedir)/include

####### objects needed to generate package library
#

OBJS_PVM		=	$(srcdir)/ArchiveMOO_$(ARCH_MACH).o \
				$(srcdir)/IndividualMOO_$(ARCH_MACH).o \
				$(srcdir)/PopulationMOO_$(ARCH_MACH).o

OBJS			= 	$(OBJS_PVM) $(sharkdir)/EALib/src/PVMinterface_$(ARCH_MACH).o    
OBJS_DEBUG		= 	$(OBJS:%.o=%.debug.o)

ifdef LIBS_PVM 
 PVM_LDLIBS	 = -lpvm3 -lgpvm3 -lnsl 
 OBJS_PVM_DEBUG  = $(OBJS_PVM:%.o=%.debug.o)
endif

############### additional include directories
#
X_CFLAGS	   += -I$(shark_includedir)

############## os specific settings
#

CFLAGS		   += 	$(X_CFLAGS) $(DEFS) -Wno-deprecated
CXXFLAGS	    = 	$(CFLAGS)


.PHONY:		all debug library library-debug examples examples-debug \
		man doc everything clean dist distclean depend independ \
		dos2unix distfilter

all: \
	library


everything: 		\
	library 	\
	library-debug 	\
	examples 	\
	examples-debug	\
	man		\
	doc

ifdef LIBS_PVM 
library: lib $(libdir)/lib$(PACKAGE_MD)${LIBEXT} \
	$(libdir)/lib$(PACKAGE)PVM_$(ARCH_MACH)${LIBEXT}

$(libdir)/lib$(PACKAGE)PVM_$(ARCH_MACH)${LIBEXT}: $(OBJS_PVM)
		$(CXX) $(LD_SHARED)  $(LDFLAGS) $(LD_LIBS) $(LIBS_PVM) $(PVM_LDLIBS) -o $@ $(OBJS_PVM)
else 
library: lib $(libdir)/lib$(PACKAGE)_$(ARCH_MACH)${LIBEXT} 
endif

lib:
	@-mkdir -p $(libdir)


$(libdir)/lib$(PACKAGE_MD)${LIBEXT}: $(OBJS)
	$(CXX) $(LD_SHARED) $(LDFLAGS) $(LD_LIBS) -o $@ $(OBJS)


debug: \
	library-debug

ifdef LIBS_PVM 
library-debug:	$(libdir)/debug $(libdir)/debug/lib$(PACKAGE_MD)${LIBEXT} \
		$(libdir)/debug/lib$(PACKAGE)PVM_$(ARCH_MACH)${LIBEXT}

$(libdir)/debug/lib$(PACKAGE)PVM_$(ARCH_MACH)${LIBEXT}: $(OBJS_PVM_DEBUG)
		$(CXX) $(LD_SHARED) $(LDFLAGS_DEBUG) $(LIBS_PVM) $(LD_LIBS) $(PVM_LDLIBS) -o $@ $(OBJS_PVM_DEBUG)
else 
library-debug: \
	$(libdir)/debug $(libdir)/debug/lib$(PACKAGE_MD)${LIBEXT}
endif

$(libdir)/debug: 
	@-mkdir -p $(libdir)/debug


$(libdir)/debug/lib$(PACKAGE_MD)${LIBEXT}: $(OBJS_DEBUG)
	$(CXX) $(LD_SHARED)  $(LDFLAGS_DEBUG) $(LD_LIBS) -o $@ $(OBJS_DEBUG)


examples: \
	library
	@printf " ## Building examples for library MOO-EALib... "
	@( cd examples; $(MAKE) -s )
	@echo "Done."


examples-debug: \
	library-debug
	@printf " ## Building examples for library MOO-EALib (debug)... "
	@( cd examples; $(MAKE) -s debug )
	@echo "Done."


man:
	@printf " ## Creating documentation for MOO-EALib library... "
	@( cd man; $(MAKE) -s )
	@echo " ## Done."

doc:
	@printf " ## Creating reference for MOO-EALib library... "
	@( cd doc; $(MAKE) -s )
	@echo "Done."

dos2unix:
	@printf "### Removing carriage returns from all source files..."
	@for i in `find . -type f \( -name "*.cpp" -o -name "*.h" -o -name "Makefile.in" -o -name "configure.in" \) -print`; do mv $$i tmp ; tr -d "\r" < tmp > $$i ; rm -f tmp ; done
	@echo "done."
	@echo "### Removing carriage returns in directory \"examples\"..."
	@( cd examples; $(MAKE) -s dos2unix )
	@echo "### Removing carriage returns in directory \"man\"..."
	@( cd man; $(MAKE) -s dos2unix )

####### transform Visual C++ project- and workspace-files to dos-format by
#       adding carriage returns if necessary
#
unix2dos:
	@printf "### Transforming all Visual C++ project and workspace files to Windows format... "
	@for i in `$(FIND) $(BASE_DIR) -type f \(\
	-name "*.dsp" -o            \
	-name "*.dsw"               \) -print`; \
	do $(PERL) -pi -e 's/\n/\r\n/;' $$i; done
	@echo "Done."


###############	clean up
#

clean:
	@-$(RM) $(OBJS) $(OBJS_DEBUG)
	@-$(RM) Makefile.bak
	@( cd examples; $(MAKE) -s clean )

ifdef LIBS_PVM 
distclean: clean
		-$(RM) $(libdir)/lib$(PACKAGE_MD)${LIBEXT}
		-$(RM) $(libdir)/debug/lib$(PACKAGE_MD)${LIBEXT}
		-$(RM) $(libdir)/lib$(PACKAGE)PVM_$(ARCH_MACH)${LIBEXT}
		-$(RM) $(libdir)/debug/lib$(PACKAGE)PVM_$(ARCH_MACH)${LIBEXT}
		( cd examples; $(MAKE) -s distclean )
else
distclean: clean
		-$(RM) $(libdir)/lib$(PACKAGE)_$(ARCH_MACH)${LIBEXT}
		-$(RM) $(libdir)/debug/lib$(PACKAGE)_$(ARCH_MACH)${LIBEXT}
		( cd examples; $(MAKE) -s distclean )
endif

distfilter: \
	clean 
	@-$(FIND) . \( 	-name "*.o"   -o 	\
			-name "*${LIBEXT}"  -o 	\
			-name "*.a"   -o 	\
			-name "*tab*" -o 	\
			-name "*~"    -o 	\
			-name "*%"    -o 	\
			-name "Makefile" -o 	\
			-name "configure" -o 	\
			-name "config.*" -o 	\
			-name "*.dvi" -o 	\
			-name "*.ps" -o 	\
			-name "*.log" -o 	\
			-name "*.aux" -o 	\
			-name "*.toc" -o 	\
			-name "*.tgz"    -o     \
			-name "*.tar.bz2"    -o \
			-name "*.tar"    -o     \
			-name "exclude" -o 	\
			-name "MOO-EALib.shared" -o \
			-name "*.bak" \) | cut -c3- >> exclude
	@-$(FIND) . -type d \( -name "lib" -o  -name "debug" -o -name "CVS" \) | cut -c3- >> exclude


ARCNAME	:= $(PACKAGE)-$(VERSION)

package:    
	@printf " ## Archiving and compressing MOO-EALib files... "
	@-(cd ..; $(MAKE) $(PACKAGE)-package)
	@echo "### Done."

zippackage:    
	@printf " ## Archiving and compressing MOO-EALib files... "
	@-(cd ..; $(MAKE) $(PACKAGE)-zippackage)
	@echo "### Done."

dist: 	\
	distfilter
	@echo 
	@echo "### Creating tgz distribution archive"
	@-(cd ..; tar -chf- MOO-EALib/* -X MOO-EALib/exclude | gzip - > $(ARCNAME).tgz )
	@-mv ../$(ARCNAME).tgz .
	@-rm -f exclude
	@echo "### Done."
	@echo


dist-bzip2: \
	distfilter
	@echo 
	@echo "### Creating bzip2 distribution archive"
	@-(cd ..; tar -chf- MOO-EALib/* -X MOO-EALib/exclude | bzip2 > $(ARCNAME).tar.bz2 )
	@-mv ../$(ARCNAME).tar.bz2 .
	@-rm -f exclude
	@echo "### Done."
	@echo


###############	dependencies
#
depend:
	@printf " ## MOO-EALib library dependencies... "
	@makedepend -o_$(ARCH_MACH).o -Y -I$(includedir) -I$(shark_includedir) \
	$(srcdir)/*.cpp 2> /dev/null
	@makedepend -a -o_$(ARCH_MACH).debug.o -Y -I$(includedir) \
	-I$(shark_includedir) $(srcdir)/*.cpp 2> /dev/null
	@echo "Done."

independ:
	@printf " ## MOO-EALib library dependencies... "
	@makedepend
	@echo "Done."


.SUFFIXES:	.o ${LIBEXT} .a .c .cpp .h

###############	implicit rules
#
%_$(ARCH_MACH).o: %.c
	$(COMPILE.cc) $(CFLAGS_ND) -o $@ $<

%_$(ARCH_MACH).o: %.cpp
	$(COMPILE.cc) $(CFLAGS_ND) -o $@ $<

%_$(ARCH_MACH).debug.o:	%.c
	$(COMPILE.c) $(CFLAGS_D) -o $@ $<

%_$(ARCH_MACH).debug.o:	%.cpp
	$(COMPILE.cc) $(CFLAGS_D) -o $@ $<


# DO NOT DELETE
