/*
*	EXAMPLE OF SURROGATE-ASSISTED MEMETIC ALGORITHM (using GA+L-BFGS-B+RBF MODEL)
*	
*/

//
// ansi c/c++ header files
//
#include <iostream.h>
#include <stdlib.h>
#include <fstream.h>
#include <vector.h>
#include <time.h>
#include <math.h>

//
// shark header files
//
#include <EALib/Population.h>
#include <Rng/RNG.h>
#include <Array/Array.h>

//
// Appromo header files
//
#include <InterpolateRBF.h>
#include <fifo.h>

//
// L-BFGS-B header file
//
#include <lbfgsb.h>

//
// some definitions
//
#define PRECISION 1.E-5

//
// fitness functions prototypes
//
double sphere( vector<double>& x );
double ackley( vector<double>& x );
double rastrigin( vector<double>& x );
double griewank( vector<double>& x );

//
// functions related to local search
//
double localSearchApproximate( vector<double>& xStart, double& locFit, unsigned trIteration );
void getInitialBoundTR( Array<double>& boundTR, Array<double> input, Array<double> target );
void getInitialDeltaTR( Array<double>& boundTR, vector<double> xStart, vector<double>& delta );
bool atBoundary( vector<double>& xOptLoc, Array<double>& boundTR );
double decidePsi( double rho, Array<double>& boundTR, vector<double>& xOptLoc );
void decideNewX( double rho, vector<double>& xStart, vector<double> xOptLoc, double& fitStart, double fitOptLoc );
void getNewDeltaAndBoundTR( double psi, vector<double>& delta, Array<double>& boundTR, vector<double> xStart );
void LSEvaluate( vector<double> xStart, double& predicted );

//
// functions related to database
//
void appendDatabase( vector<double>& a, double fitness );
double getDistance( vector<double>& a, vector<double>& b );

//
// global variables
//
double(*evaluate)( vector<double>& );
double objectiveFunction( vector<double>& x );
unsigned dimension=30;
unsigned count = 0;
double currBest = HUGE;
vector<double> currBestVec( dimension );
vector<double> lowestBound(dimension);
vector<double> highestBound(dimension);




unsigned maxNOfData = dimension*100;
FIFO myData;

//
// model specific
//
InterpolateRBF aRBF;

int main( int argc, char** argv ) {

	srand( time( NULL ) );
	Rng::seed(time(NULL));
	
	unsigned i, j;
	
	//
	// default settings are listed below for minimizing 30D griewank(range -600 to 600), 8000 evaluations, 1 elitist, popsize of 100, mutateProb 0.01, crossProb 0.90
	// Local search performed on all offsprings, with intensity of 3 exact evaluations (reflected from the number of trust region iteration);
	//
	evaluate = &griewank;

	unsigned popSize = 100,
		 nElitist = 1,
		 maxCount = 8000;
		 
	double crossProb = 0.90;
	double mutateProb = 0.01;
	double memeticProb = 1.0;
	unsigned trIteration = 3;	
	unsigned databaseBuildingPhase = 1000;		// in terms of function evaluation count
		 
	//Population parent(popSize, ChromosomeT<double>(dimension));

	for(i=0; i<dimension; i++) {
		lowestBound[i] = -600;
		highestBound[i] = 600;
	}
	

	//
	// read parameter file, by default the filename is param.dat , 
	// otherwise put it as the first argument of the main executable file, 
	// e.g.  ./ga paramFileName
	//
	char paramFileName[30];
	if( argc>1 ) {
		sprintf( paramFileName, "%s", argv[1] ); 
	}
	else sprintf( paramFileName, "param.dat" );
	bool useParamFile;

	//
	// read param file
	//
	char dummy[20];
	ifstream paramFile( paramFileName );
		

	paramFile >> dummy >> useParamFile;
	


	if( useParamFile ) {
		char funcName[20];
		bool sameBoundFlag;
		paramFile >> dummy >> dimension
			  >> dummy >> popSize
			  >> dummy >> maxCount
			  >> dummy >> mutateProb
			  >> dummy >> crossProb
			  >> dummy >> memeticProb
			  >> dummy >> trIteration
			  >> dummy >> databaseBuildingPhase
			  >> dummy >> funcName
			  >> dummy >> sameBoundFlag;

		if     ( !strcmp(funcName, "griewank") ) evaluate = &griewank;
		else if( !strcmp(funcName, "rastrigin") ) evaluate = &rastrigin;
		else if( !strcmp(funcName, "ackley") ) evaluate = &ackley;
		else if( !strcmp(funcName, "sphere") ) evaluate = &sphere;
		else {
			cout << "Fitness function undefined !" << endl;
			exit( 1 );
		}

		lowestBound.resize( dimension );
		highestBound.resize( dimension );
		if( sameBoundFlag ) {
			paramFile >> dummy >> lowestBound[ 0 ]
				  >> dummy >> highestBound[ 0 ];

			for( i=1; i<dimension; i++ ) {
				lowestBound[ i ] = lowestBound[ 0 ];
				highestBound[ i ] = highestBound[ 0 ]; 
			}
		}	
		else {
			paramFile >> dummy;
			for( i=0; i<dimension; i++ ) {
				paramFile >> lowestBound[ i ];
			}
			paramFile >> dummy;
			for( i=0; i<dimension; i++ ) {
				paramFile >> highestBound[ i ];
			}
		}
 
	}
	paramFile.close();
	

	//
	// bestFile.dat logs the best fitness found so far, bestVecFile.dat logs the best design vector found so far
	//
	ofstream bestFile("logs/bestFile.dat",ios::trunc);
	ofstream bestVecFile("logs/bestVecFile.dat",ios::trunc);
	bestFile.close();
	bestVecFile.close();

	myData = FIFO( maxNOfData, dimension, 1 );

	ChromosomeT<double> tempLoBound(lowestBound);
        ChromosomeT<double> tempHiBound(highestBound);
	
	currBestVec.resize(dimension); 
        
	Population parent(popSize, ChromosomeT<double>(dimension));

	for(i=0; i<parent.size(); i++) {
                dynamic_cast<ChromosomeT<double>&>(parent[i][0]).initialize(tempLoBound,tempHiBound);
		
		double tempFit =  objectiveFunction( dynamic_cast<ChromosomeT<double>&>(parent[i][0]) );
                parent[i].setFitness( tempFit );

        }

	Population offspring(popSize, ChromosomeT<double>(dimension));
	
	parent.setMinimize();
	offspring.setMinimize();
	
	unsigned t = 1;
	double bestFitness =  parent.best().fitnessValue();
        cout << "Best fitness at generation " << t << " = " << bestFitness << endl;
	
	//
	// optimization starts here !!!
	//
	while( count < maxCount )  {
	
		//
		// decide which allele to be crossed
		//
		vector<bool> pos(dimension);
		for(j=0; j<dimension; j++) {
                       pos[j] = (rand()%11)>5?0:1;
                }

		//
		// do uniform crossover
		//
        	offspring = parent;
        	for( i = 0; i < offspring.size( )-1; i += 2 ) {
            		if( Rng::coinToss( crossProb ) ) {
                		offspring[ i ][ 0 ].crossoverUniform( offspring[ i+1 ][ 0 ],pos);
			}
		}		

		//
		// do uniform mutation
		//
		for(i=0; i<offspring.size(); i++) {
                       dynamic_cast< ChromosomeT< double >& >( offspring[ i ][ 0 ] ).mutateUniform(tempLoBound, tempHiBound, mutateProb);
		}

		for(i=0; i<offspring.size(); i++) {

			double tempFit;
			
			if( count > databaseBuildingPhase && Rng::coinToss( memeticProb ) )
				localSearchApproximate( dynamic_cast<vector<double>&>( offspring[ i ][ 0 ] ), tempFit, trIteration );
			else 
				tempFit = objectiveFunction( dynamic_cast<vector<double>&>( offspring[ i ][ 0 ])  );
			
			offspring[i].setFitness( tempFit );
		}

		//
	        //scaling and selection   
		//
		const unsigned Omega       = 5;
		vector< double > window( Omega );
		offspring.linearDynamicScaling( window, t );
	        parent.selectProportional( offspring, nElitist );

		bestFitness = parent.best().fitnessValue();
		cout << "Best fitness at generation " << t+1 << " = " << bestFitness << endl;
		
		t++;
	}	

	bestFile.close();
	bestVecFile.close();
	return 0;
}

double localSearchApproximate( vector<double>& xStart, double& locFit, unsigned trIteration ) {
	
	unsigned i, j;
	
	Array<double> input = myData.getInput();
	Array<double> target = myData.getTarget();
		
	
	//
	// use k-nearest
	//
	//
	unsigned currSize = myData.getCurrentSize();
	unsigned kNearest = (unsigned) ( (dimension+1)*(dimension+2)/2 );
	
	Population pop( currSize, ChromosomeT<double>(dimension), ChromosomeT<double>(1) );
	pop.setMinimize();
	
		
	//
	// utilize the population structure to find nearest points
	//
	vector<double> tempVec(dimension);
	vector<double> tempVec2(dimension);
        for( j=0; j<dimension; j++ ) {
               tempVec2[j] = xStart[j];
        }
	for( i=0; i<pop.size(); i++ ) {
		for( j=0; j<dimension; j++ ) {
			tempVec[j] = input(i,j);
		}
		
		ChromosomeT<double> tempChrom(tempVec);
		dynamic_cast< ChromosomeT<double>& > (pop[i][0]).initialize( tempChrom, tempChrom );
		dynamic_cast< ChromosomeT<double>& > (pop[i][1]).initialize( target(i,0), target(i,0) );
		
		vector<double> tempVec2(dimension);
		for( j=0; j<dimension; j++ ) {
			tempVec2[j] = xStart[j];
		}
		pop[i].setFitness( getDistance( tempVec, tempVec2  ) );
	}
	pop.sort();
	input.resize( kNearest, dimension, false );
	target.resize( kNearest, 1, false );
	for( i=0; i<kNearest; i++ ) {
		for( j=0; j<dimension; j++ ) {
			input( i, j ) = dynamic_cast<vector<double>&>( pop[i][0] )[ j ];
		}
		target( i, 0 ) = dynamic_cast<vector<double>&>( pop[i][1] )[ 0 ];
	}
	
	
	
	//==================== model specific code =======================//
	Array<double> kernParams(1,1);				// for completeness sake, no use for rbf linear spline
	kernParams(0,0) = 1;
	aRBF= InterpolateRBF( dimension, linear_spline, kernParams );	// see rbf.h for more options
	aRBF.train(input, target);
	
	//==================== end model specific code ====================//

	double fitStart;
	double fitStartApprox, fitOptLocApprox;
	
	//
	// determine initial tr
	//
	Array<double> boundTR(dimension, 2);
	vector<double> delta(dimension);
	getInitialBoundTR( boundTR, input, target );
	getInitialDeltaTR( boundTR, xStart, delta );
	
	//
	// do trust region here
	//	
	fitStart = objectiveFunction( xStart );
	double predicted;
	double rho;
	vector<double> xOptLoc( dimension );

	for(i=0; i<trIteration; i++) {
						
		//
		// perform local search
		//
		findLocalOpt( xStart, xOptLoc, boundTR ); 
		
		double fitOptLoc = objectiveFunction( xOptLoc );
		
		LSEvaluate( xStart, predicted );
		fitStartApprox = predicted;
		
		LSEvaluate( xOptLoc, predicted );
		fitOptLocApprox = predicted;
	
		//
		// calculate rho,  small number added to prevent divide by zero
		//
		rho = ( fitStart - fitOptLoc ) / ( fitStartApprox - fitOptLocApprox + PRECISION );

		cout << "fitStart = " << fitStart << endl;
                cout << "fitOptLoc = " << fitOptLoc << endl;
                cout << "fitStartApprox = " << fitStartApprox << endl;
                cout << "fitOptLocApprox = " << fitOptLocApprox << endl;
                cout << "RHO = " << rho << endl;

		//
		// determine next tr
		//
		double psi = decidePsi( rho, boundTR, xOptLoc );
	
		decideNewX( rho, xStart, xOptLoc, fitStart, fitOptLoc );
		getNewDeltaAndBoundTR( psi, delta, boundTR, xStart );

		
	}
	
	locFit = fitStart;
}


//
// model specific
//
void LSEvaluate( vector<double> xStart, double& predicted ) {
	unsigned i;
	Array<double> xx( 1, dimension );
	Array<double> result(1,1);
	for(i=0; i<dimension; i++) {
		xx(0,i) = xStart[ i ];
	}	
	
	aRBF.evaluate(xx, result);	
	predicted = result(0,0);
}

void getNewDeltaAndBoundTR( double psi, vector<double>& delta, Array<double>& boundTR, vector<double> xStart ) {
	unsigned i;
	
	for(i=0; i<dimension; i++) {
		delta[i] *= psi;		
		boundTR(i,0) = max( lowestBound[i] , xStart[i] - delta[i] );
		boundTR(i,1) = min( highestBound[i] , xStart[i] + delta[i] );
	}
}

void decideNewX( double rho, vector<double>& xStart, vector<double> xOptLoc, double& fitStart, double fitOptLoc ) {
	if(rho > 0) {
		unsigned i;
		for( i=0; i<dimension; i++ ) {
			xStart[i] = xOptLoc[i];
		}
		fitStart = fitOptLoc;
	}
}

double decidePsi( double rho, Array<double>& boundTR, vector<double>& xOptLoc ) {

	if(rho<=0.25) return 0.25;
	if(rho<=0.75) return 1;
	else {
		//
		// simplified to only return 2
		//
		return 2;
	
		//
		// original version
		//
		// if( atBoundary( xOptLoc, boundTR ) ) return 2;
		// else return 1
	}
}

bool atBoundary( vector<double>& xOptLoc, Array<double>& boundTR ) {

	unsigned i;

	for( i=0; i<dimension; i++ ) {
		if(  
			( xOptLoc[ i ] > boundTR(i,0) - PRECISION  &&  xOptLoc[ i ] < boundTR( i, 0 )+PRECISION )  ||  
			( xOptLoc[ i ] > boundTR(i,1) - PRECISION  &&  xOptLoc[ i ] < boundTR( i, 1 )+PRECISION )  
		) {
			return true;
		}
	}

	return false;
}


void getInitialBoundTR( Array<double>& boundTR, Array<double> input, Array<double> target ) {
	
	unsigned i, j, size = input.dim(0);
	
	for(i=0; i<dimension; i++) {
		double min = input(0,i), max = input(0,i);
		
		for(j=1; j<size; j++) {
			if(input(j,i)<min) min = input(j,i);
			if(input(j,i)>max) max = input(j,i);
		}	
		
		boundTR(i,0) = min;
		boundTR(i,1) = max;
	}
}

void getInitialDeltaTR( Array<double>& boundTR, vector<double> xStart, vector<double>& delta ) {
	
	unsigned i;
	double upper, lower;
	for(i=0; i<dimension; i++) {
		upper = boundTR(i,1) - xStart[i];
		lower = xStart[i] - boundTR(i,0);
		
		delta[i] = min(upper,lower);
	}
	for(i=0; i<dimension; i++) {
		boundTR(i,0) = xStart[i] - delta[i];
		boundTR(i,1) = xStart[i] + delta[i];
	}
	
}

double objectiveFunction( vector<double>& x ) {
	unsigned i;
	double tempFit = evaluate( x );

	count++;
        if(tempFit<currBest) {
        	currBest = tempFit;
                for(i=0 ;i<dimension; i++) {
                	currBestVec[ i ] =  x[ i ];
                        
                }
	}
        
	ofstream bestFile("logs/bestFile.dat", ios::app);
	ofstream bestVecFile("logs/bestVecFile.dat", ios::app);

        bestFile << count << "\t" << currBest << endl;
        bestVecFile << count << "\t";
        for( i=0; i<dimension; i++ ) {
        	bestVecFile << currBestVec[ i ] << "\t";
        }
        bestVecFile << endl;
	
	bestFile.close();
	bestVecFile.close();

	appendDatabase( x, tempFit );

	return tempFit;
}

void appendDatabase( vector<double>& a, double fitness ) {

	vector<double> target(1);

	target[0] = fitness;

	bool equalDatabase = false;

	unsigned i, j,
		currDataSize = myData.getCurrentSize();
	

	Array<double> tempInp = myData.getInput();
	for(i=0; i<currDataSize; i++) {
		vector<double> b(dimension);
		for(j=0; j<dimension; j++) {
			b[j] = tempInp(i,j);
		}
		if( getDistance( a, b ) < PRECISION ) {
			equalDatabase = true;
			break;
		}
	}

	if( !equalDatabase ) myData.append( a, target );

}

double getDistance( vector<double>& a, vector<double>& b ) {

	//assert( a.size() == b.size() );
	unsigned i, j;

	double sum = 0;
	for(i=0; i<a.size(); i++) {
		sum += ( a[i]-b[i] )*( a[i]-b[i] );

	}

	return sqrt(sum);

}

double sphere( vector<double>& x ) {

	unsigned size = x.size();
	unsigned i;
	double result=0;
	
	for(i=0; i<size; i++) {
		result += x[i]*x[i];
	
	}
	
	return result;
	
}


double ackley( vector< double >& x )
{
    const double A = 20.;
    const double B = 0.2;
    const double C = znPi2C;

    unsigned i, n;
    double   a, b;

    for( a = b = 0., i = 0, n = x.size( ); i < n; ++i ) {
        a += x[ i ] * x[ i ];
	b += cos( C * x[ i ] );
    }

    return -A * exp( -B * sqrt( a / n ) ) - exp( b / n ) + A + znEC;
}



double rastrigin( vector < double >& x ) {
        int varsize = x.size( );
        int w, i, j, a = 2;
        float c;
        double result, unNormVar;

        result = 0;
        for ( w = 0; w < varsize; w++ ) {
                result = result + ( ( ( x[ w ] ) * ( x[ w ] ) ) - 10.0 * cos( 2 * M_PI * ( x[ w ] ) ) );
        }
        result = ( result + 10.0 * varsize );
        return result;
}


double griewank(vector<double>& l_array)
{
        int varsize = l_array.size();

        double l_value, l_Sumobj, l_Productobj;
        int w;

        l_value = 0;
        l_Sumobj = 0;
        l_Productobj = 1;


        for (w = 0; w < varsize; w++) {

                l_Sumobj = l_Sumobj + ((l_array[w] * l_array[w])/4000);
                l_Productobj = l_Productobj * cos(l_array[w]/sqrt(w+1.0));
        }
        l_value = (l_Sumobj + 1 - l_Productobj) ;

        return l_value;
}

// ==================================================   eof  ============================================ //
